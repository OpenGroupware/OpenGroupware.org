// template bindings

RowRep: WORepetition {
  list = rowList;
  item = row;
}

ColumnRep: WORepetition {
  list = columnList;
  item = column;
}

AttributeRep: WORepetition {
  list = attributes;
  item = attribute;
}

Value: WOString {
  value = valueString;
}

ShowCheckerCond: WOConditional {
  condition = isShowChecker;
}

ShowCheckerCondElse: WOConditional {
  condition = isShowChecker;
  negate    = YES;
}

ShowTableTag: WOConditional {
  condition = showTableTag;
}

Checker: WOCheckBox {
  checked = isChecked;
}

RadioButton: WORadioButton {
  checked = isChecked;
  name    = groupName;
}

EmptyRadioButton: WORadioButton {
  checked = isEmptyChecked;
  name    = groupName;
}

IsItalicStyle: WOConditional {
  condition = isItalicStyle;
}

// TODO: use CSS
Font: WOGenericContainer {
  elementName   = "font";
  color         = config.font_color;
  size          = config.font_size;
  face          = config.font_face;
}

UseRadioButtonsCond: WOConditional {
  condition = useRadioButtons;
}

UsePopUpCond: WOConditional {
  condition = usePopUp;
}

CheckerPopUp: WOPopUpButton {
  list      = popUpList;
  item      = popUpItem;
  string    = popUpItemLabel;
  selection = popUpSelection;
  nilString = popUpNilString;
}

UseCheckBoxesCond: WOConditional {
  condition = useCheckBox;
}

Test: WOString {
  value = selectedItems;
}

ShowAttribute: WOConditional {
  condition = isAttributeVisible;
}

RelatedObjectRep: WORepetition {
  list       = arrayAttrList;
  item       = relatedObject;
  separator  = ", ";
}

Attribute: WOString {
  value      = attributeLabel;
  escapeHTML = NO;
}

ArrayAttrCond : WOConditional {
  condition = isArrayAttribute;
}

ArrayAttrCondElse : WOConditional {
  condition = isArrayAttribute;
  negate    = YES;
}

AttributeCell : WOGenericContainer {
  elementName = "td";
  valign      = "top";
  align       = "right";
  bgcolor     = attributeColor; // component config: colors_attributeCell
  width       = "15%";
}

ValueCell : WOGenericContainer {
  elementName = "td";
  align       = "left";
  valign      = "top";
  bgcolor     = valueColor; // component config: colors_valueCell
}

NilCell : WOGenericContainer {
  elementName = "td";
  align       = "left";
  valign      = "top";
  bgcolor     = valueColor; // component config: colors_valueCell
  colspan     = nilColSpan;
}

Cell : WOGenericContainer {
  elementName = "td";
  align       = attribute.align;
  valign      = "top";
  bgcolor     = valueColor; // component config: colors_valueCell
}

WithNil: WOConditional {
  condition = withNil;
}

NilString: WOString {
  value      = nilString;
  escapeHTML = NO;
}

HasTemplateCond: WOConditional {
  condition = hasTemplate;  
}

HasTemplateCondElse: WOConditional {
  condition = hasTemplate;
  negate    = YES;
}

TemplateValue: WOString {
  value = templateValue;
}

HasAttributesCond : WOConditional {
  condition = hasAttributes;
}

HasAttributesCondElse : WOConditional {
  condition = hasAttributes;
  negate    = YES;
}
