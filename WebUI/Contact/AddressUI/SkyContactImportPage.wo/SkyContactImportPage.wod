// $Id: SkyContactImportPage.wod,v 1.6 2003/12/22 17:04:53 helge Exp $

Frame: LSWSkyrixFrame {}

Window: LSWWindowFrame {
  title   = windowTitle;
  onClose = cancel;
}

Title: LSWViewerTitle {
  title = windowTitle;
}

RecordsToProceed: SkyAttribute {
  label  = labels.import_label_recordsToProceed;
  string = entries.count;
}

HasImportCntCond:    WOConditional { condition = importCount;    }
HasIgnoreCntCond:    WOConditional { condition = ignoreCount;    }
HasDuplicateCntCond: WOConditional { condition = duplicateCount; }
HasNextCond:         WOConditional { condition = hasNextEntry;   }
HasNextCondElse:     WOConditional { condition = hasNextEntry; negate = YES; }

IsPersonCond: WOConditional { 
  condition = contactType; 
  value     = "Person"; 
}

IsEnterpriseCond: WOConditional {
  condition = contactType; 
  value     ="Enterprise";
}

HasDuplicatesCond: WOConditional { 
  condition = hasDuplicates; 
}

AlreadyImportedAttr: SkyAttribute {
  label  = labels.import_label_alreadyImported;
  string = importCount;
}

IgnoredAttr: SkyAttribute {
  label  = labels.import_label_ignored;
  string = ignoreCount;
}

MarkedDuplicateAttr: SkyAttribute {
  label  = labels.import_label_markedDuplicate;
  string = duplicateCount;
}

NoMoreRecordsAttr: SkyAttribute {
  string = labels.import_label_noMoreRecords;
}

NextRecordLabel: SkyRichString {
  isBold = YES;
  value  = labels.import_label_nextRecord;
}

FirstnameAttr: SkyAttribute {
  label  = labels.firstname;
  string = nextEntry.firstname;
}

MiddlenameAttr: SkyAttribute {
  label  = labels.middlename;
  string = nextEntry.middlename;
}

NameAttr: SkyAttribute {
  label  = labels.name;
  string = nextEntry.name;
}

NicknameAttr: SkyAttribute {
  label  = labels.nickname;
  string = nextEntry.nickname;
}

Email1Attr: SkyAttribute {
  label  = labels.email1;
  string = nextEntry.email1;
}

NumberAttr: SkyAttribute {
  label  = labels.number;
  string = nextEntry.number;
}

EmailAttr: SkyAttribute {
  label  = labels.email;
  string = nextEntry.email;
}

DuplicatesAttr: SkyAttribute {
  label = labels.import_label_similarRecords;
}

DuplicatesTable: SkyTableView {
  list = duplicates;
  item = item;
}

AttrSwitch: WESwitch { 
  selections = contactAttributes; 
}

FirstnameCase:  WECase { key = "firstname";  }
MiddlenameCase: WECase { key = "middlename"; }
NameCase:       WECase { key = "name";       }
NicknameCase:   WECase { key = "nickname";   }
Email1Case:     WECase { key = "email1";     }
EmailCase:      WECase { key = "email";      }
NumberCase:     WECase { key = "number";     }
PrivateCase:    WECase { key = "isPrivate";  }

FirstnameData: WETableData {
  title  = labels.firstname;
  string = item.firstname;
}

MiddlenameData: WETableData {
  title  = labels.middlename;
  string = item.middlename;
}

NameData: WETableData {
  title  = labels.name;
  string = item.name;
  action = viewDuplicate;
}

NicknameData: WETableData {
  title  = labels.nickname;
  string = item.nickname;
}

Email1Data: WETableData {
  title  = labels.email1;
  string = item.email1;
}

EmailData: WETableData {
  title  = labels.email;
  string = item.email;
}

NumberData: WETableData {
  title  = labels.number;
  string = item.number;
}

PrivateData: WETableData {
  title = labels.personeditor_privateLabel;
  string = labels.$isPrivateLabelKey;
}

// actions

Cancel: WOHyperlink {
  action = cancel;
  string = labels.import_action_cancel;
  class  = "button_narrow";
}

Buttons: SkyButtonRow {
  ordering         = ( import, ignore, skip, openineditor,
                       openinbcgathering, cancel );

  hasImportpublic  = YES;
  hasIgnore        = YES;
  hasMakrduplicate = hasDuplicates;
  hasSkip          = maySkip;
  hasOpenineditor  = YES;
  hasOpeninbcgathering = isPerson;
  hasCancel        = YES;

  import           = labels.import_action_importRecord;
  ignore           = labels.import_action_ignoreRecord;
  markduplicate    = labels.import_action_markDuplicate;
  skip             = labels.import_action_skip;
  openineditor     = labels.import_action_openInEditor;
  openinbcgathering = labels.import_action_openInBussinessCardGathering;
  cancel           = labels.import_action_cancel;

  onImport        = importNext;
  onIgnore        = ignoreNext;
  onMarkduplicate = markDuplicate;
  onSkip          = skip;
  onOpenineditor  = openInEditor;
  onCancel        = cancel;
  onOpeninbcgathering = openInBussinessCardGathering;
}
