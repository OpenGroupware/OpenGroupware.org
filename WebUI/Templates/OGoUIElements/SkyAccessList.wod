// bind template to controller

TableContent:  WOTableContent    {}
TableHeader:   WOTableHeader     {}
AttributeCell: SkyAttributeCell  {}
ValueCell:     SkyValueCell      {}
Font:          SkyConfigFont     {}
EditFont:      SkyConfigEditFont {}

HeaderCellLeft: WOGenericContainer {
  elementName = "TD";
  BGCOLOR     = config.colors_mainButtonRow;
  ALIGN       = "left";
  VALIGN      = "middle";
}
HeaderCellMiddle: WOGenericContainer {
  elementName = "TD";
  BGCOLOR     = config.colors_mainButtonRow;
  ALIGN       = "center";
  VALIGN      = "middle";
}

TeamString: WOString {
  value = labels.team;
}

TeamsPopUp: WOPopUpButton {
  list      = fetchTeamEOs;
  item      = item;
  string    = item.description;
  selection = team;
  nilString = labels.searchAccountsOption;
  onChange  = "document.editform.submit(); return true";
}

AccountSearchField: WOTextField {
  //        name     = "search";
  value    = searchString;
  //  onChange = "document.editform.submit(); return true";
}

SearchSubmit: WOSubmitButton {
  action           = search;
  value            = labels.searchButton;
  class            = "button_narrow";
}

HasAccountsConditional: WOConditional {
  condition = hasAccountSelection;
}

IsTeamCondElse: WOConditional {
  condition = isTeam;
  negate    = YES;
}

IsTeamCond: WOConditional {
  condition = isTeam;
}

AccountsList: WOTable {
  maxColumns  = 2;
  item        = item;
  list        = companies;
  hasOwnTDs   = accessListCount;
  cellspacing = 0;
}

Description: WOString { value = item.description; }
LastName:    WOString { value = item.name;        }
FirstName:   WOString { value = item.firstname;   }
Login:       WOString { value = item.login;       }

AttributeCellTable:     SkyAttributeCell { width = 0; alignCenter = YES; }
AttributeCellTableLeft: SkyAttributeCell { width = 0; alignLeft   = YES; }

AccessCheckName: WOString      { value = accessItem;         }
AccountName:     SkyRichString { value = labels.accountName; }

SearchLabel:     WOString { value = labels.search;     }
AccessListLabel: WOString { value = labels.accessList; }

IsInTableCondElse: WOConditional {
  condition = isInTable;
  negate    = YES;
}

AccessCheckRepetition: WORepetition {
  list = accessChecks;
  item = accessItem;
}

AccessCheckIcon: WOImage {
  ALT      = accessAlternateText;
  filename = accessImageName;
  VALIGN   = "middle";
  ALIGN    = "center";
}

AccessCheck: WOCheckBox {
  checked = currentAccessRight;
}

ViewerModeCond:     WOConditional { condition = isViewerMode; }
ViewerModeCondElse: WOConditional { condition = isViewerMode; negate = YES; }

IsCheckedCond:     WOConditional { condition = currentAccessRight; }
IsCheckedCondElse: WOConditional { condition = currentAccessRight; negate=YES;}

CheckedIcon: WOImage {
  filename = "icon_permissions_checked_viewer.gif";
  VALIGN   = "middle";
  ALIGN    = "center";
}
