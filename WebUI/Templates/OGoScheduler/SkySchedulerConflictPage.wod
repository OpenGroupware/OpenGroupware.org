// bind template to controller

Frame: LSWSkyrixFrame {}

Window: LSWWindowFrame {
  title = labels.SchedulerConflictPageTitle;
  onClose = session.navigation.leavePage;
}

// cells

ParticipantAppointmentCell: WOGenericContainer {
  elementName = "td";
  align       = "left";
  valign      = "top";
  bgcolor     = config.colors_valueCell;
  rowspan     = participantConflicts.count;
}
ResourceAppointmentCell: WOGenericContainer {
  elementName = "td";
  align       = "left";
  valign      = "top";
  bgcolor     = config.colors_valueCell;
  rowspan     = resourceConflicts.count;
}

ValueCell: SkyValueCell {}

// conditions

HasParticipantConflictCond: WOConditional {
  condition = participantConflicts.isNotEmpty;
}
IsNotLastParticipantConflictCond: WOConditional {
  condition = isNotLastParticipantConflict;
}

HasResourceConflictCond: WOConditional {
  condition = resourceConflicts.isNotEmpty;
}
IsNotLastResourceConflictCond: WOConditional {
  condition = isNotLastResourceConflict;
}

// reps

ParticipantConflictRep: WORepetition {
  list  = participantConflicts;
  item  = conflict;
  index = index;
}
ResourceConflictRep: WORepetition {
  list  = resourceConflicts;
  item  = conflict;
  index = index;
}

// titles

ParticipantConflictTitle: LSWViewerTitle {
  title = labels.participantConflict;
}
ResourceConflictTitle: LSWViewerTitle {
  title = labels.resourceConflict;
}

// Conflicts

ParticipantConflict : SkySchedulerConflictCell {
  appointment    = appointment;
  participantIds = participantIds;
  conflict       = conflict;
  type           = "00_participantConflict";
}
ResourceConflict : SkySchedulerConflictCell {
  appointment    = appointment;
  participantIds = participantIds;
  conflict       = conflict;
  type           = "05_resourceConflict";
}

ParticipantAppointment : SkySchedulerConflictCell {
  appointment = appointment;
  type        = "01_participantAppointment";
}

ResourceAppointment : SkySchedulerConflictCell {
  appointment = appointment;
  type        = "06_resourceAppointment";
}

// action

Buttons: SkyButtonRow {
  ordering = ( back, ignore, ignorealways );
  onBack         = back;
  onIgnore       = ignoreConflicts;
  onIgnorealways = ignoreAlwaysConflicts;
  back           = labels.back;
  ignore         = labels.ignore;
  ignorealways   = labels.ignoreAlways;
}
ButtonsWithoutIgnore: SkyButtonRow {
  ordering = ( back );
  onBack         = back;
  back           = labels.back;
}

HideIgnoreButtons: WOConditional {
  condition = hideIgnoreButtons;
}

ShowIgnoreButtons: WOConditional {
  condition = hideIgnoreButtons;
  negate    = YES;
}
