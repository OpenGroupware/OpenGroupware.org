// $Id: LSWProjectEditor.wod 2 2004-08-20 11:37:44Z znek $

Frame: LSWSkyrixFrame {}

Window: LSWWindowFrame {
  title   = labels.projectEditorTitle;
  onClose = cancel;
}

ProjectForm: WOForm {
  NAME   = "editform";
  action = search;
}

WarningModeCond:     WOConditional { condition = isInWarningMode; }
WarningModeCondElse: WOConditional { condition = isInWarningMode; negate=YES;}
IsInNewModeElse:     WOConditional { condition = isInNewMode; negate = YES; }
IsInNewMode:         WOConditional { condition = isInNewMode;     }
IsOwnerAssigned:     WOConditional { condition = isOwnerAssigned; }

Warning: LSWWarningPanel {
  onOk      = warningOkAction;
  phrase    = warningPhrase;
}

ProjectEditor: LSWObjectEditor {
  labels      = labels;
  object      = project;
  attributes  = (
    { key = "name"; },
    { key = "number"; label = "code"; },
    { key = "startDate"; calendarFormat = "%Y-%m-%d"; time = "00:00:00"; },
  );
}

LeaderLabel: WOString {
  value = labels.leader;
}
PrivateLabel: WOString {
  value     = teamSelection.description;
  nilString = labels.teamNilSelect;
}

LeaderPopup: WOPopUpButton {
  list      = session.accounts;
  item      = item;
  string    = item.login;
  selection = ownerSelection;
  nilString = labels.root;
}

IsRootCond:      WOConditional { condition = session.activeAccountIsRoot; }
IsRootOrNewCond: WOConditional { condition = isRootOrNew; }
IsRootCondElse:  WOConditional {
  condition = session.activeAccountIsRoot;
  negate    = YES;
}

TeamPopup: WOPopUpButton {
  list      = session.teams; // TODO: replace with command call
  item      = team;
  string    = team.description;
  selection = teamSelection;
  nilString = "-";
  // onChange = "searchFieldChanged(this.value);";
}

TeamString: WOString { value = labels.team; }

SaveSubmit: WOSubmitButton {
  action   = save;
  value    = labels.saveButton;
  disabled = isSaveDisabled;
  class    = "button_narrow";
}
SaveSubmitDA: WOSubmitButton {
  value    = labels.saveButton;
  disabled = isSaveDisabled;
  class    = "button_narrow_da";
}
IsSaveEnabled: WOConditional {
  condition = isSaveDisabled;
  negate    = YES;
}
IsSaveDisabled: WOConditional {
  condition = isSaveDisabled;
}

DeleteSubmit: WOHyperlink {
  action   = delete;
  string   = labels.deleteButton;
  disabled = isDeleteDisabled;
  class    = "button_narrow";
}
IsDeleteEnabled: WOConditional {
  condition = isDeleteDisabled;
  negate    = YES;
}

CancelSubmit: WOHyperlink {
  action = cancel;
  string = labels.cancelButton;
  class  = "button_narrow";
}

ArchiveSubmit: WOHyperlink {
  action = archive;
  string = labels.archiveButton;
  class  = "button_auto";
}

AttributeCell: SkyAttributeCell {}
ValueCell:     SkyValueCell     {}

// searching for persons

SearchPersonLabel: WOString { value = labels.search; }
SearchLabel:       WOString { value = labels.search; }

TeamsPopUp: WOPopUpButton {
  list      = session.teams;
  item      = team;
  string    = team.description;
  selection = searchTeam;
  nilString = labels.searchAccountsOption;
  onChange  = "searchFieldChanged(this.value);";
}

ExtendedCheckBox: WOCheckBox {
  checked = showExtended;
  onClick = "document.editform.submit(); return true";
}

ExtendedString: WOString {
  value = labels.ExtendedView;
}

AccountSearchField: WOTextField {
  name  = "search";
  value = accountSearchText;
  // onChange = "searchFieldChanged(this.value);";
}

SearchSubmit: WOSubmitButton {
  action = search;
  value  = labels.searchButton;
  class  = "button_narrow";
}

NoAccountsConditional: WOConditional {
  condition = hasAccountSelection;
  negate    = YES;
}

AccountsConditional: WOConditional {
  condition = hasAccountSelection;
  negate    = NO;
}

HasAccountsConditional: WOConditional {
  condition = hasAccountSelection;
}

IsTeamCondElse: WOConditional { condition = isTeam; negate    = YES; }
IsTeamCond:     WOConditional { condition = isTeam; }

IsCheckBoxEnabled: WOConditional {
  condition = isCheckBoxEnabled;
}

SearchAccounts: WOString { value = labels.searchAccounts; }

AddAccounts: WOString {
  escapeHTML = NO;
  value      = labels.accessAccounts;
}

Font:     SkyConfigFont     {}
EditFont: SkyConfigEditFont {}

TeamLabel: WOString { value = teamLabel; }

IsTeamSet: WOConditional { condition = isTeamSet; }
HasResult: WOConditional { condition = hasResult; }

Calendar: SkyCalendarScript {}

SearchOwnerField: WOTextField {
  name  = "searchOwner";
  value = searchOwnerText;
}

SearchOwnerSubmit: WOSubmitButton {
  action    = searchLeader;
  value     = labels.search;
  class     = "button_narrow";
}

OwnerResultList: SkyListView {
    list            = ownerResultList;
    item            = item;
    columns         = noOfCols;
    useRadioButtons = YES;
    selectedItems   = addedOwners;
    attributes      = ( { key = "name";      suffix = ", "; },
                        { key = "firstname";                } );
}

LeaderLogin: WOString {
  value = ownerSelection.login;
}
LeaderString: WOString {
  value = ownerSelection.fullNameLabel;
}

// Associates

ShowEnterpriseListCond: WOConditional { condition = isShowEnterpriseList; }
ShowPersonListCond:     WOConditional { condition = isShowPersonList;     }

SearchCompaniesLabel: WOString { value = labels.searchCompanies;     }
EnterprisesLabel:     WOString { value = labels.assignedEnterprises; }
PersonsLabel:         WOString { value = labels.assignedPersons;     }

CompanyTypePopup: WOPopUpButton {
  list      = ( "enterpriseType", "personType" );
  item      = companyTypeItem;
  string    = companyTypeLabel;
  selection = companyTypeSelection;
}
CompanySearchField: WOTextField {
  name  = "companySearch";
  value = companySearchText;
}
CompanySearchSubmit: WOSubmitButton {
  action = companySearch;
  value  = labels.searchButton;
  class  = "button_narrow";
}

SelectedPersonList: SkyListView {
  list          = personList;
  selectedItems = persons;
  columns       = 3;
  attributes    = personAttributeList;
}

PersonList: SkyListView {
  list          = personResultList;
  selectedItems = newPersons;
  columns       = 3;
  attributes    = personAttributeList;
}

SelectedEnterpriseList: SkyListView {
  list          = enterpriseList;
  selectedItems = enterprises;
  columns       = 3;
  attributes    = ( { key = "description"; } );
}

EnterpriseList: SkyListView {
  list          = enterpriseResultList;
  selectedItems = newEnterprises;
  columns       = 3;
  attributes    = ( { key = "description"; } );
}

Comment: WOText {
  value = project.comment;
  rows  = 10;
  cols  = 80;
  WRAP  = "physical";
}

CommentString: WOString { value = labels.annotation; }

ResultList: SkyListView {
  labels        = labels;
  list          = resultList;
  item          = item;
  selectedItems = addedAccounts;
  columns       = noOfCols;
  attributes    = accountAttributesList;
  usePopUp      = YES;
  popUpList     = ("r","rw");
  popUpValueKey = "accessRight";
  nilString     = "-"; 
}

AccountsList: WOTable {
  maxColumns = 2;
  item       = item;
  list       = allAccess;
  hasOwnTDs  = 8;
  cellspacing = 0;
  //  BORDER     = 1;
}

LastName:  WOString { value = item.name;      }
FirstName: WOString { value = item.firstname; }
Login:     WOString { value = item.login;     }

ManagerAccessCheck:  WOCheckBox { checked = item.accessCheck.m; }
ReadAccessCheck:     WOCheckBox { checked = item.accessCheck.r; }
WriteAccessCheck:    WOCheckBox { checked = item.accessCheck.w; }
InsertAccessCheck:   WOCheckBox { checked = item.accessCheck.i; }
DeleteAccessCheck:   WOCheckBox { checked = item.accessCheck.d; }
DesignerAccessCheck: WOCheckBox { checked = item.accessCheck.f; }

HasAccounts: WOConditional { contition = hasAccounts; }

Description: WOString { value = item.description; }

TableContent: WOTableContent {}
TableHeader:  WOTableHeader  {}

AttrTableCell: SkyAttributeCell {
  width       = 0;
  alignCenter = YES;
}

AttrTableCellLeft: SkyAttributeCell {
  width       = 0;
  alignLeft = YES;
}

AccountName: SkyRichString {
  value     = labels.accountName;
}
ManagerAccessName: SkyRichString {
  value = labels.m;
}
ManagerAccessIcon: WOImage {
  ALT      = labels.permissions_m;
  filename = "icon_permissions_m.gif";
}
ReadAccessName: SkyRichString {
  value = labels.r;
}
ReadAccessIcon: WOImage {
  ALT      = labels.permissions_r;
  filename = "icon_permissions_r.gif";
}
WriteAccessName: SkyRichString {
  value = labels.w;
}
WriteAccessIcon: WOImage {
  ALT      = labels.permissions_w;
  filename = "icon_permissions_w.gif";
}
InsertAccessName: SkyRichString {
  value = labels.i;
}
InsertAccessIcon: WOImage {
  ALT      = labels.permissions_i;
  filename = "icon_permissions_i.gif";
}
DeleteAccessName: SkyRichString {
  value = labels.d;
}
DeleteAccessIcon: WOImage {
  ALT      = labels.permissions_d;
  filename = "icon_permissions_d.gif";
}
DesignerAccessName: SkyRichString {
  value = labels.f;
}
DesignerAccessIcon: WOImage {
  ALT      = labels.permissions_f;
  filename = "icon_permissions_f.gif";
}

ProjectEditorPublicExtAttrs: LSWObjectEditor {
  labels     = labels;
  object     = project;
  attributes = publicExtendedProjectAttributes;
  map        = propMap;
}
ProjectEditorPrivateExtAttrs: LSWObjectEditor {
  labels       = labels;
  object       = project;
  attributes   = privateExtendedProjectAttributes;
  map          = propMap;
  privateLabel = privateLabel;
}
ExtendedCollapsible: SkyCollapsibleContent {
  visibility       = session.userDefaults.project_editor_extendedVisibility;
  submitActionName = "";
  title            = labels.extended; 
}
CommonCollapsible: SkyCollapsibleContent {
  visibility       = session.userDefaults.project_editor_commonVisibility;
  submitActionName = "";
  title            = labels.common; 
}
CommentCollapsible: SkyCollapsibleContent {
  visibility       = session.userDefaults.project_editor_commentVisibility;
  submitActionName = "";
  title            = labels.comment; 
}

HasExtendedAttrs: WOConditional {
  condition = hasExtendedAttributes;
}

HasOldCommonProjectCompatibility: WOConditional {
  condition = oldProjectCompatiblity;
}

HasMoreThanOneProjectBases: WOConditional {
  condition = hasMoreThanOneProjectBases;
}

ProjectBase: WOString {
  value = labels.ProjectBase;
}

BasePopup: WOPopUpButton {
  list      = projectBases;
  item      = item;
  string    = projectBaseLabel;
  selection = projectBase;
}
BaseRadios: WORadioButtonList {
  list      = projectBases;
  item      = item;
  value     = projectBaseLabel;
  selection = projectBase;
}

ShowProjectUrl:   WOConditional { condition = showProjectURL; }
ProjectUrlString: WOString      { value     = labels.projectUrl; }
ProjectUrl:       WOTextField   { 
  value = project.url; 
  size  = 60;
}
