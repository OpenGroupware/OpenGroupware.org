// $Id: SkyAptParticipantsList.wod,v 1.3 2004/05/06 23:10:41 helge Exp $

IsPrintModeCondElse: WOConditional {
  condition = printMode;
  negate    = YES;
}

MainButtonRow: WOGenericContainer {
  elementName = "TR";
  BGCOLOR     = config.colors_tableViewHeaderCell;
}

MainTitle: WOString {
  value = appointment.title;
}

IsAddMeToParticipantsCond: WOConditional {
  condition = isAddMeToParticipants;
}

IsRemoveMeFromParticipantsCond: WOConditional {
  condition = isRemoveMeFromParticipants;
}

Buttons: SkyButtonRow {
  ordering = ( 
    addme, removeme, enabledetails, disabledetails,
    showmembers, hidemembers,
    accept, decline, tentative
  );

  hasAddme = isAddMeToParticipants;
  onAddme  = addMeToParticipants;
  addme    = addMeToParticipantsActionLabel;

  hasRemoveme = isRemoveMeFromParticipants;
  onRemoveme  = removeMeFromParticipants;
  removeme    = labels.removeMe;

  hasEnabledetails  = hideDetails;
  onEnabledetails   = enableDetails;
  enabledetails     = labels.showDetails;

  hasDisabledetails = showDetails;
  onDisabledetails  = disableDetails;
  disabledetails    = labels.hideDetails;

  hasShowmembers = dontExpandTeams;
  onShowmembers  = showMembers;
  showmembers    = labels.action_showMembers;

  hasHidemembers = expandTeams;
  onHidemembers  = hideMembers;
  hidemembers    = labels.action_hideMembers;

  hasAccept    = showAcceptButton;
  onAccept     = acceptAppointment;
  accept       = labels.action_acceptAppointment;
  hasDecline   = showDeclineButton;
  onDecline    = declineAppointment;
  decline      = labels.action_declineAppointment;
  hasTentative = showTentativeButton;
  onTentative  = appointmentTentative;
  tentative    = labels.action_appointmentTentative;
}

ShowParticipantStateCond: WOConditional {
  condition = showParticipantRoles;
}
ShowDetailsCond: WOConditional {
  condition = showDetails;
}
ExpandTeamsCond: WOConditional {
  condition = expandTeams;  
}
ExpandTeamsCondElse: WOConditional {
  condition = expandTeams;
  negate    = YES;
}
FullTableData: WOGenericContainer {
  elementName = "td";
  colspan     = tableColumns;
}

HideMembersAction: WOHyperlink {
  filename = "expanded.gif";
  action   = hideMembers;
  title    = labels.action_hideMembers;
  alt      = labels.action_hideMembers;
  border   = 0;
}
ShowMembersAction: WOHyperlink {
  filename = "collapsed.gif";
  action   = showMembers;
  title    = labels.action_showMembers;
  alt      = labels.action_showMembers;
  border   = 0;
}

ParticipantRepetition: WORepetition {
  list    = participants;
  item    = item;
}
ParticipantLink: WOHyperlink {
  directActionName = "activate";
  ?oid    = item.companyId;
  string  = participantLabel;
}

IsTeamParticipant: WOConditional {
  condition = isParticipantTeam;
}
IsPersonParticipant: WOConditional {
  condition = isParticipantTeam;
  negate    = YES;
}

IsParticipantViewAllowed: WOConditional {
  condition = isParticipantViewAllowed;
}
IsParticipantViewAllowedElse: WOConditional {
  condition = isParticipantViewAllowed;
  negate    = YES;
}

TeamName: WOString {
  value  = participantLabel;
}

MemberRepetition: WORepetition {
  list    = participantTeamMembers;
  item    = member;
}
MemberLink: WOHyperlink {
  directActionName = "activate";
  ?oid    = member.companyId;
  string  = teamMemberLabel;
}
MemberName: WOString {
  value = member.name;
}

/* enterprise stuff */

PartEnterpriseRep: WORepetition {
  list       = item.enterprises;
  item       = enterprise;
  separator  = ", ";
}
MemberEnterpriseRep: WORepetition {
  list       = member.enterprises;
  item       = enterprise;
  separator  = ", ";
}

EnterpriseName : WOHyperlink {
  directActionName = "activate";
  ?oid    = enterprise.companyId;
  string  = enterprise.description;
}

/* member values */

MemberFName: WOString {
  value  = member.firstname;
}
MemberFunction: WOString {
  value  = member.job_title;
}
MemberEmail: WOHyperlink {
  href   = memberEmail;
  string = member.email1;
}
MemberEmailAction: WOHyperlink {
  action = mailToMember;
  string = member.email1;
}
MemberDegree: WOString {
  value  = member.degree;
}
MemberTel: WOString {
  value  = member.01_tel;
}
DialTel: SkyDialNumber {
  number = member.01_tel;
}

/* participant values */

PartName: WOString {
  value  = item.name;
}
PartFName: WOString {
  value  = item.firstname;
}
PartFunction: WOString {
  value  = item.job_title;
}
PartEmail: WOHyperlink {
  href   = itemEmail;
  string = item.email1;
}
PartEmailAction: WOHyperlink {
  action = mailToItem;
  string = item.email1;
}
PartDegree: WOString {
  value  = item.degree;
}
PartRole: WOString {
  value = item.role;
}
PartStatus: SkyRichString {
  value = participantStatusLabel;
  color = participantStatusColor;
}
PartTel: WOString {
  value  = item.01_tel;
}
DialPartTel: SkyDialNumber {
  number = item.01_tel;
}

Font: SkyConfigFont {}

ArchivedObjectFont: WOGenericContainer {
  elementName = "FONT";
  SIZE        = config.font_size;
  FACE        = config.font_face;
  COLOR       = config.colors_deleted_object;
}

TableHeaderRow: WOGenericContainer {
  elementName = "TR";
  BGCOLOR     = config.colors_tableViewAttributeCell;
}

// labels

NameLabel : WOString {
  value   = labels.nameLabel;
}
FNameLabel : WOString {
  value   = labels.fNameLabel;
}
FunctionLabel : WOString {
  value   = labels.functionLabel;
}
DegreeLabel : WOString {
  value   = labels.degreeLabel;
}
PartRoleLabel: WOString {
  value   = labels.participantRole;
}
PartStatusLabel: WOString {
  value   = labels.participantStatus;
}
EmailLabel : WOString {
  value   = labels.emailLabel;
}
TelLabel : WOString {
  value   = labels.telLabel;
}
EpLabel : WOString {
  value   = labels.epLabel;
}
TeamLabel : WOString {
  value   = labels.teamLabel;
}
PrivateLabel : WOString {
  value   = labels.accessTeam;
}

IsPersonAvailable: WOConditional {
  condition = isPersonAvailable;
}
IsPersonNotAvailable: WOConditional {
  condition = isPersonAvailable;
  negate    = YES;
}
IsEnterpriseAvailable: WOConditional {
  condition = isEnterpriseAvailable;
}
IsEnterpriseNotAvailable: WOConditional {
  condition = isEnterpriseAvailable;
  negate    = YES;
}
IsInternalMailer: WOConditional {
  condition = isInternalMailEditor;
}
IsNotInternalMailer: WOConditional {
  condition = isInternalMailEditor;
  negate    = YES;
}


IsArchivedCondElse : WOConditional {
  negate    = YES;
  condition = isArchived;
};
IsArchivedCond : WOConditional {
  condition = isArchived;
};
