// $Id: LSWAppointmentEditor.wod,v 1.13 2004/06/16 13:17:53 helge Exp $

Frame: LSWSkyrixFrame {}

Window: LSWWindowFrame {
  title   = labels.AppEditorTitle;
  onClose = cancel;
}

IsJavaScriptEnabled: WOConditional {
  condition = session.isJavaScriptEnabled;
}
IsJavaScriptDisabled: WOConditional {
  condition = session.isJavaScriptEnabled;
  negate    = YES;
}

ShowCalPopUp: WOConditional {
  condition = context.request.clientCapabilities.isJavaScriptBrowser;
}

EditorForm: WOForm {
  name     = "editform";
}

AppointmentDayLabel: WOString { value = appointmentDayLabel; }

WarningModeCond: WOConditional {
  condition = isInWarningMode;
}

WarningModeCondElse: WOConditional {
  condition = isInWarningMode;
  negate    = YES;
}

Warning: LSWWarningPanel {
  onOk      = warningOkAction;
  phrase    = warningPhrase;
}

AptDateSelection: SkyAptDateSelection {
  startDate   = startDate;
  startHour   = startHour;
  startMinute = startMinute;
  startTime   = startTime;
  
  endDate   = endDate;
  endHour   = endHour;
  endMinute = endMinute;
  endTime   = endTime;

  isAllDayEvent    = isAllDayEvent;
  timeInputType    = timeInputType;
  isNewOrNotCyclic = isNewOrNotCyclic;
  formName         = "editform";
  useAMPMDates     = showAMPMDates;
}

NotificationLabel: WOString {
    value = labels.notificationTime;
}

MeasuresPopUp: WOPopUpButton {
  list              = ("10m", "30", "60", "120", "360", "720", "1440", "2880", "5760", "11520" );
  item              = measure;
  string            = measureLabel;
  selection         = notificationTime;
  singleSelection   = YES;
  noSelectionString = "-";
}

AccessTeamSelect: WOPopUpButton {
  list              = accessTeams;
  item              = item;
  string            = item.description;
  selection         = selectedAccessTeam;
  singleSelection   = YES;
  noSelectionString = labels.privateAppointment;
}

TitleTextFieldJS: JSValidatedField {
  formName        = "editform";
  inputText       = appointment.title;
  errorMessage    = "title is required";
  fieldSize       = 40;
  inputIsRequired = YES;
}
TitleTextField: WOTextField {
  name    = "title";
  value   = appointment.title;
  SIZE    = 40;
}
LocationTextField: WOTextField {
  name    = "location";
  value   = appointment.location;
  SIZE    = 40;
}
AbsenceTextField: WOTextField {
  name    = "absence";
  value   = appointment.absence;
  SIZE    = 40;
}
CommentTextArea: SkyTextEditor {
  text    = comment;
  rows    = session.userDefaults.scheduler_editor_comment_rows;
  columns = session.userDefaults.scheduler_editor_comment_columns;
  wrap    = "physical";
}

NoParticipantsConditional: WOConditional {
  condition = hasParticipantSelection;
  negate    = YES;
}

ParticipantsConditional: WOConditional {
  condition = hasParticipantSelection;
  negate    = NO;
}

HasParticipantsConditional: WOConditional {
  condition = hasParticipantSelection;
}

AppointmentOnLabel: WOString { value = labels.appointmentOnLabel; }
CycleEndDateLabel:  WOString { value = labels.cycleEndDateLabel;  }

IsNotNewConditional: WOConditional {
        condition = isInNewMode;
        negate    = YES;
}

SaveSubmit: WOSubmitButton {
  action = save;
  value  = labels.saveButtonLabel;
  title  = labels.saveButtonLabel_title;
  class  = "button_narrow";
}
SaveAndMailSubmit: WOSubmitButton {
  action = saveAndSendMail;
  value  = labels.saveAndMailButtonLabel;
  title  = labels.saveAndMailButtonLabel_title;
  class  = "button_wide";
}
DeleteLink: WOHyperlink {
  action   = delete;
  string   = labels.deleteButtonLabel;
  title    = labels.deleteButtonLabel_title;
  disabled = isDeleteDisabled;
  class    = "button_narrow";
}

IsDeleteEnabled: WOConditional {
  condition = isDeleteDisabled;
  negate    = YES;
}
IsDeleteDisabled: WOConditional {
  condition = isDeleteDisabled;
}
DeleteDeniedButton: JSAlertPanel {
  filename         = "remove_inactive.gif";
  ALT              = labels.deleteButtonLabel;
  action           = context.page;
  alertMessage     = "You cannot delete the appointment !";
}
DeleteSubmitJS: JSConfirmPanel {
  // filename    = "remove.gif";
  // altTag      = labels.deleteButtonLabel;
  action         = reallyDelete;
  string         = labels.deleteButtonLabel;
  confirmMessage = labels.really_delete;
  border         = 0;
  class          = "button_narrow";
}

DateProposalSubmit: WOSubmitButton {
        action           = appointmentProposal;
        value            = labels.proposalButtonLabel;
        class            = "button_narrow";
}

SaveAllSubmit: WOSubmitButton {
        action           = saveAllCyclic;
        value            = labels.saveAllButtonLabel;
        title            = labels.saveAllButtonLabel_title;
        disabled         = isSaveDisabled;
        class            = "button_wide";
}

DeleteAllLink: WOHyperlink {
  action   = deleteAllCyclic;
  string   = labels.deleteAllButtonLabel;
  title    = labels.deleteAllButtonLabel_title;
  disabled = isDeleteDisabled;
  class    = "button_wide";
}

CancelSubmit: WOHyperlink {
  action   = cancel;
  string   = labels.cancelButtonLabel;
  class    = "button_narrow";
}

// move section

MoveAmountPopUp: WOPopUpButton {
        list            = ( "", 1, 2, 3, 4, 5, 6, 7 );
        item            = item;
        selection       = moveAmount;
        string          = moveAmountLabel;
        singleSelection = YES;
}
MoveUnitPopUp: WOPopUpButton {
        list            = idxArray3;
        item            = item;
        selection       = moveUnit;
        string          = moveUnitLabel;
        singleSelection = YES;
}
MoveDirectionPopUp: WOPopUpButton {
        list            = idxArray2;
        item            = item;
        selection       = moveDirection;
        string          = moveDirectionLabel;
        singleSelection = YES;
}
MoveSubmit: WOSubmitButton {
        action          = moveAppointment;
        value           = labels.moveButtonLabel;
        title           = labels.moveButtonLabel_title;
        class           = "button_narrow";
}

AttributeCell: SkyAttributeCell {}
ValueCell:     SkyValueCell     {}
ValueCell2:    SkyValueCell     { alignTop = YES; }

TitleAttribute:      WOString { value = labels.title;    }
LocationAttribute:   WOString { value = labels.location; }
AbsenceAttribute:    WOString { value = labels.absence;  }
CreatorAttribute:    WOString { value = labels.creator;  }
AccessTeamAttribute: WOString { value = labels.accessTeamLabel; }
CommentAttribute:    WOString { value = labels.comment;  }
SearchParticipantsAttribute: WOString { value = labels.searchParticipants; }
AddParticipantsAttribute:    WOString { value = labels.addParticipants;    }
MoveAppointmentAttribute:    WOString { value = labels.moveAppointment;    }

MainButtonRow: WOGenericContainer {
  elementName = "tr";
  BGCOLOR     = config.colors_mainButtonRow;
}

IgnoreConflictsCheckBox: WOCheckBox {
        checked = ignoreConflicts;
}

IgnoreConflictsPopUp: WOPopUpButton {
    list              = ( "onlyNow", "always" );
    item              = item;
    string            = ignoreConflictsLabel;
    selection         = ignoreConflictsSelection;
    singleSelection   = YES;
    noSelectionString = "-";
}
ButtonFont: WOGenericContainer {
  elementName = "font";
  class       = "defaultfont";
}
IgnoreConflictsButtons: WORadioButtonList {
  list      = ( "dontIgnore", "onlyNow", "always" );
  item      = item;
  value     = ignoreConflictsLabel; /* the visible label */
  selection = ignoreConflictsButtonSelection;
  prefix    = "&nbsp;";
  suffix    = "&nbsp;";
}

IgnoreConflictsLabel: WOString {
  value = labels.ignoreConflictsLabel;
}

// aptType is not the repetition type .. !!
ShowAptTypeSelectionCond: WOConditional {
  condition = YES;//hasAptTypes;
}
AptTypeAttr: SkyAttribute {
  label = labels.attribute_aptType;
}

//AptTypeSelection: WOPopUpButton {
//  list            = aptTypes;
//  item            = item;
//  string          = aptTypeLabel;
//  selection       = aptTypeSelection;
//  singleSelection = YES;
//}
AptTypeSelection: SkyAptTypeSelection {
  selection = appointment.aptType
}

AbsenceCheckBox: WOCheckBox {
        checked = isAbsence;
}

ReachableLabel: WOString {
        value = labels.reachable;
}

Font:     SkyConfigFont     {}
EditFont: SkyConfigEditFont {}

IsInNewMode:      WOConditional { condition = isInNewMode; }
IsCyclic:         WOConditional { condition = isCyclic; }
IsNotCyclic:      WOConditional { condition = isCyclic; negate = YES; }
IsNewOrNotCyclic: WOConditional { condition = isNewOrNotCyclic; }

CyclePopUp: WOPopUpButton {
  list              = ("daily", "weekly", "14_daily", "4_weekly", "monthly", "weekday", "yearly" );
  //list              = config.cycleUnits;
  item              = item;
  string            = unitLabel;
  selection         = appointmentType;
  singleSelection   = YES;
  noSelectionString = labels.once;
}

Cycle: WOString {
  value      = cycleType;
  escapeHTML = NO;
}

CycleAttribute:  WOString { value = labels.type;   }
UntilLabel:      WOString { value = labels.until;  }
BeforeLabel:     WOString { value = labels.before; }
AttendanceLabel: WOString { value = labels.attendance; }

CycleEndDateString: WOString {
  value = cycleEndDateString;
}
CycleEndDate: WOTextField {
        name      = "cycleEndDate";
        value     = cycleEndDate;
        SIZE      = 12;
}

CalendarPopupCycleEndDateLink: SkyCalendarPopUp {
  elementName = "cycleEndDate";
  formName    = "editform";
}

AttendanceChecker: WOCheckBox {
    checked = isAttendance;
}

Calendar: SkyCalendarScript {}

ParticipantsSelection: SkyParticipantsSelection {
  participants         = participants;
  selectedParticipants = selectedParticipants;
  onlyAccounts         = NO;
  headLineLabel        = "searchParticipants";
  searchLabel          = "searchParticipants";
  selectionLabel       = "addParticipants";
  viewHeadLine         = NO;
  isClicked            = isParticipantsClicked;
}

AccessSelection: SkyParticipantsSelection {
  participants         = accessMembers;
  selectedParticipants = selectedAccessMembers;
  onlyAccounts         = YES;
  headLineLabel        = "assignAccessRights";
  searchLabel          = "searchAccounts";
  selectionLabel       = "chooseAccounts";
  viewHeadLine         = NO;
  isClicked            = isAccessClicked;
}

ResourceSelection: SkyResourceSelection {
  resources     = resources;
  resultList    = moreResources;
  viewHeadLine  = NO;
  onlyResources = YES;
  isClicked     = isResourceClicked;
}

IsSchedulerClassicEnabled: WOConditional {
  condition = isSchedulerClassicEnabled;
}

IsMailEnabled: WOConditional {
  condition = isMailEnabled;
}

// -----------------------------------------------------------------

CollTitleMode:   SkyCollapsibleTitleMode   {}
CollContentMode: SkyCollapsibleContentMode {}

AppCollapsible: SkyCollapsibleContent {
  visibility = session.userDefaults.scheduler_editor_expand_attributes;
  submitActionName = "";
  structuredMode   = YES;
}

ParticipantsTitle:  SkyCollapsibleContent {
  visibility = session.userDefaults.scheduler_editor_expand_participants;
  title      = labels.searchParticipants;
  submitActionName = "";
  isClicked = isParticipantsClicked;
}

ResourcesTitle:  SkyCollapsibleContent {
  visibility = session.userDefaults.scheduler_editor_expand_resources;
  title      = labels.searchResources;
  submitActionName = "";
  isClicked = isResourceClicked;
}

AccessTitle:  SkyCollapsibleContent {
  visibility = session.userDefaults.scheduler_editor_expand_access;
  title      = labels.assignAccessRights;
  submitActionName = "";
  isClicked = isAccessClicked;
}

CommentTitle:  SkyCollapsibleContent {
  visibility = session.userDefaults.scheduler_editor_expand_comment;
  title      = labels.comment;
  submitActionName = "";
}

MoveTitle: SkyCollapsibleContent {
  visibility = session.userDefaults.scheduler_editor_expand_move;
  title      = labels.move;
  submitActionName = "";
}
ShowIgnoreConflictsCond: WOConditional {
  condition = isShowIgnoreConflicts;
}

IsNotificationEnabled: WOConditional {
  condition = isNotificationEnabled;
}

DefaultAction: WOImageButton {
  action   = search;
  filename = "invisible_space_1.gif";
  BORDER   = 0;
}
