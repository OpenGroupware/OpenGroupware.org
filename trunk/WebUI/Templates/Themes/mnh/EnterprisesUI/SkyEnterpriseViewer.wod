// $Id: SkyEnterpriseViewer.wod 2 2004-08-20 11:37:44Z znek $

Frame: LSWSkyrixFrame {}

Window: LSWWindowFrame {
  title = labels.enterpriseviewer_title;
  onClose = session.navigation.leavePage;
}
Title: LSWViewerTitle {
  title = viewerTitle;
}

// tabs

TabBody: SkyTabView {
  selection = tabKey;
}

PersonsTab: SkyTabItem {
  key        	   = "persons";
  icon       	   = "persons";
  label      	   = labels.enterpriseviewer_tab_persons;
  tabIcon    	   = "tab_small.gif";
  leftTabIcon	   = "tab_small_left.gif";
  selectedTabIcon  = "tab_small_selected.gif"; 
}
DocumentsTab: SkyTabItem {
  key       = "documents";
  icon      = "documents";
  label     = labels.enterpriseviewer_tab_documents;
  action    = viewDocuments;
  tabIcon    	   = "tab_small.gif";
  leftTabIcon	   = "tab_small_left.gif";
  selectedTabIcon  = "tab_small_selected.gif"; 
}
ProjectsTab: SkyTabItem {
  key       = "projects";
  icon      = "projects";
  label     = labels.enterpriseviewer_tab_projects;
  tabIcon    	   = "tab_small.gif";
  leftTabIcon	   = "tab_small_left.gif";
  selectedTabIcon  = "tab_small_selected.gif"; 
}
OverviewTab: SkyTabItem {
  key       = "overview";
  icon      = "overview";
  label     = labels.enterpriseviewer_tab_overview;
  action    = viewOverview;
  isScript  = YES;
  tabIcon    	   = "tab_small.gif";
  leftTabIcon	   = "tab_small_left.gif";
  selectedTabIcon  = "tab_small_selected.gif"; 
}
AddressTab: SkyTabItem {
  key       = "address";
  icon      = "address";
  label     = labels.enterpriseviewer_tab_address;
  isScript  = YES;
  tabIcon    	   = "tab_small.gif";
  leftTabIcon	   = "tab_small_left.gif";
  selectedTabIcon  = "tab_small_selected.gif"; 
}
AttributesTab: SkyTabItem {
  key       = "attributes";
  icon      = "attributes";
  label     = labels.enterpriseviewer_tab_attributes;
  isScript  = YES;
  tabIcon    	   = "tab_small.gif";
  leftTabIcon	   = "tab_small_left.gif";
  selectedTabIcon  = "tab_small_selected.gif"; 
}
LogTab: SkyTabItem {
  key       = "log";
  label     = labels.enterpriseviewer_tab_log;
  icon      = "log";
  tabIcon    	   = "tab_small.gif";
  leftTabIcon	   = "tab_small_left.gif";
  selectedTabIcon  = "tab_small_selected.gif"; 
}

LinkTab: SkyTabItem {
  key       = "links";
  label     = labels.enterpriseviewer_tab_links;
  icon      = "links";
  tabIcon    	   = "tab_small.gif";
  leftTabIcon	   = "tab_small_left.gif";
  selectedTabIcon  = "tab_small_selected.gif"; 
}

// content

PersonList: SkyPersonList {
  dataSource = enterprise.personDataSource;
}

PersonalAttributes: SkyPersonalAttributesViewer {
  object = enterprise;
}

AddressesViewer: SkyAddressesViewer {
  company = enterprise;
  columns = 3;
}

ProjectList: SkyEnterpriseProjectList {
  enterprise    = enterprise;
  isEditEnabled = isEditEnabled;
}

LogList: SkyObjectLogList {
  object = enterprise;
}

RelatedLinks: OGoObjectLinkList {
  object = enterprise;
}


PersonButtons: SkyButtonRow {
  ordering  = ( assign );
  onAssign  = assignPerson;
  hasAssign = isEditEnabled;
  assign    = labels.assignPerson;
}

ShortEnterpriseViewer: LSWObjectViewer {
  object         = enterprise;
  labels         = labels;
  attributeColor = "attributeCell";
  valueColor     = "valueCell";
  hideEmpty      = YES;
  attributes     = ( { key = "number"; label = "enterprise_number"; } );
}

AttributeCell: SkyAttributeCell {}
ValueCell:     SkyValueCell     {}

Buttons: SkyButtonRow {
  ordering = ( clip, edit, mail );
  /* default buttons */
  onClip  = placeInClipboard;
  hasEdit = isEditEnabled;
  onEdit  = edit;
  onMail  = mailObject;
  urlMail = objectUrl;

  /* labels */
  clip   = labels.clip;
  edit   = labels.edit;
  mail   = labels.send;
}

SubButtons: SkyButtonRow {
  orderign = ( edit );
  hasEdit  = isEditEnabled;
  onEdit   = edit;
  edit     = labels.edit;
}

MainButtonRow: WOGenericContainer {
  elementName = "tr";
  BGCOLOR     = config.colors_mainButtonRow;
}

Font: SkyConfigFont {}

IsPrivate:  WOConditional { condition = enterprise.isPrivate.boolValue;  }
IsReadonly: WOConditional { condition = enterprise.isReadonly.boolValue; }

PrivateLabel:  WOString { value = labels.private;  }
ReadonlyLabel: WOString { value = labels.readonly; }

IndexDocContent: WOString {
  value    = indexDocContent;
  insertBR = YES;
}

SubAttributeCell: WOGenericContainer {
  elementName = "td";
  ALIGN       = "right";
  VALIGN      = "top";
  BGCOLOR     = config.colors_subAttributeCell;
  WIDTH       = "15%";
}

SubValueCell: WOGenericContainer {
  elementName = "td";
  ALIGN       = "left";
  BGCOLOR     = config.colors_subValueCell;
}

EditDocLink: SkyButtonRow {
  ordering    = ( docedit );
  onDocedit   = editIndexDocument;
  docedit     = labels.edit;
  hasDocedit  = isEditEnabled;
}

DocumentTitleLink: WOHyperlink {
  action   = viewIndexDocument;
  string   = indexDocTitle;
  disabled = isEditDisabled;
        
}

IsIndexDocEditDisabledElse: WOConditional {
  condition = isIndexDocEditDisabled;
  negate   = YES;
}

IsEditEnabledCond: WOConditional {
  condition = isEditDisabled;
  negate    = YES;
}

FormLetterLink: WOHyperlink {
  target = formLetterTarget;
  action = downloadFormLetter;
  STYLE  = "text-decoration:none";
}
FormLetterName: WOString {
  value = labels.FormLetterLink;
}

DownloadLabel: WOString {
  value = labels.download;
}

VCardLink: WOHyperlink {
  target   = formLetterTarget;
  action   = downloadVCard;
  mimeType = "text/directory";
  STYLE    = "text-decoration:none";
}

VCardName: WOString {
    value = "vcard";
}

AccessList: SkyAccessList {
  accessList   = accessIds;
  isInTable    = NO;
  accessChecks = accessChecks;
  labels       = labels;
  isViewerMode = YES;
}

AccessTab: SkySimpleTabItem {
  key       = "access";
  action    = accessTabClicked;
  label     = labels.accessTab;
  tabIcon    	   = "tab_small.gif";
  leftTabIcon	   = "tab_small_left.gif";
  selectedTabIcon  = "tab_small_selected.gif"; 
}
AccessTitle: LSWViewerTitle {
  title    = labels.access;
  gentable = YES;
}

AccessButtons: SkyButtonRow {
  onEdit   = editAccess;
  ordering = ( edit );
  edit     = labels.edit;
  hasEdit  = isEditEnabled;
}

IsEditAllowed: WOConditional {
  condition = isEditEnabled;
}

IsEditAllowedElse: WOConditional {
  condition = isEditEnabled;
  negate    = YES;
}

DocumentTitle: WOString {
  value = indexDocTitle;
}

IsProjectEnabled: WOConditional {
  condition = isProjectEnabled;
}

IsLogTabEnabled: WOConditional {
  condition = isLogTabEnabled;
}

IsAccessRightEnabled: WOConditional {
  condition = isAccessRightEnabled;
}

IsLinkTabEnabled: WOConditional {
  condition = isLinkTabEnabled;
}
